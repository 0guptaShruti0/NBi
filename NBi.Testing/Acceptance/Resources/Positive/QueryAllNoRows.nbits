<?xml version="1.0" encoding="utf-8" ?>
<testSuite name="Acceptance Testing: query equalTo Csv" xmlns="http://NBi/TestSuite">
  <settings>
    <default apply-to="system-under-test">
      <connectionString>Data Source=mhknbn2kdz.database.windows.net;Initial Catalog=AdventureWorks2012;User Id=sqlfamily;password=sqlf@m1ly</connectionString>
    </default>
  </settings>
  <test name="All-rows is doing the job for numeric info" uid="0001">
    <system-under-test>
      <execution>
        <query
					connectionString="Data Source=mhknbn2kdz.database.windows.net;Initial Catalog=AdventureWorks2012;User Id=sqlfamily;password=sqlf@m1ly"
				>
          select 
            OrderDate
            , SUM(TotalDue)
          from
            [Sales].[SalesOrderHeader]
          group by
            OrderDate
        </query>
      </execution>
    </system-under-test>
    <assert>
      <all-rows>
        <variable column-index="1">TotalDue</variable>
        <predicate name="TotalDue">
          <less-than>10000000</less-than>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="All-rows is doing the job with within-range" uid="0001">
    <system-under-test>
      <execution>
        <query
					connectionString="Data Source=mhknbn2kdz.database.windows.net;Initial Catalog=AdventureWorks2012;User Id=sqlfamily;password=sqlf@m1ly"
				>
          select
          OrderDate
          , SUM(TotalDue)
          from
          [Sales].[SalesOrderHeader]
          group by
          OrderDate
        </query>
      </execution>
    </system-under-test>
    <assert>
      <all-rows>
        <variable column-index="1">TotalDue</variable>
        <predicate name="TotalDue">
          <within-range>(+)</within-range>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="All-rows also works for textual information" uid="0001">
    <system-under-test>
      <execution>
        <query
					connectionString="Data Source=mhknbn2kdz.database.windows.net;Initial Catalog=AdventureWorks2012;User Id=sqlfamily;password=sqlf@m1ly"
				>
          select
          [Name], [CountryRegionCode]
          from
          [Sales].[SalesTerritory]
        </query>
      </execution>
    </system-under-test>
    <assert>
      <all-rows>
        <variable column-index="0">Name</variable>
        <predicate name="Name" type="text">
          <more-than>Afg</more-than>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="No-row with numeric information" uid="0001">
    <system-under-test>
      <execution>
        <query
					connectionString="Data Source=mhknbn2kdz.database.windows.net;Initial Catalog=AdventureWorks2012;User Id=sqlfamily;password=sqlf@m1ly"
				>
          select
          OrderDate
          , SUM(TotalDue)
          from
          [Sales].[SalesOrderHeader]
          group by
          OrderDate
        </query>
      </execution>
    </system-under-test>
    <assert>
      <no-rows>
        <variable column-index="1">TotalDue</variable>
        <predicate name="TotalDue">
          <more-than>9000000</more-than>
        </predicate>
      </no-rows>
    </assert>
  </test>
  <test name="No-row also works for textual information" uid="0001">
    <system-under-test>
      <execution>
        <query
					connectionString="Data Source=mhknbn2kdz.database.windows.net;Initial Catalog=AdventureWorks2012;User Id=sqlfamily;password=sqlf@m1ly"
				>
          select
          [Name], [CountryRegionCode]
          from
          [Sales].[SalesTerritory]
        </query>
      </execution>
    </system-under-test>
    <assert>
      <no-rows>
        <variable column-index="0">Name</variable>
        <predicate name="Name" type="text">
          <more-than>VN</more-than>
        </predicate>
      </no-rows>
    </assert>
  </test>
  <test name="With Predicate StartsWith" uid="0002">
    <system-under-test>
      <execution>
        <query name="Select first departments">
          select [Name] from [HumanResources].[Department] where Name like 'E%' order by Name
        </query>
      </execution>
    </system-under-test>
    <assert>
      <all-rows>
        <variable column-index="0">Name</variable>
        <predicate name="Name" type="text">
          <starts-with>E</starts-with>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="With Predicate EndsWith" uid="0003">
    <system-under-test>
      <execution>
        <query name="Select first departments">
          select [Name] from [HumanResources].[Department] where Name like '%e' order by Name
        </query>
      </execution>
    </system-under-test>
    <assert>
      <all-rows>
        <variable column-index="0">Name</variable>
        <predicate name="Name" type="text">
          <ends-with>e</ends-with>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="With Predicate contains" uid="0004">
    <system-under-test>
      <execution>
        <query name="Select first departments">
          select [Name] from [HumanResources].[Department] where Name like '%en%' order by Name
        </query>
      </execution>
    </system-under-test>
    <assert>
      <all-rows>
        <variable column-index="0">Name</variable>
        <predicate name="Name" type="text">
          <contains ignore-case="true">en</contains>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="With Predicate match" uid="0004">
    <system-under-test>
      <execution>
        <query name="Select first departments">
          select [Name] from [HumanResources].[Department]
        </query>
      </execution>
    </system-under-test>
    <assert>
      <all-rows>
        <variable column-index="0">Name</variable>
        <predicate name="Name" type="text">
          <matches-regex>^[A-Z][A-z\s]+$</matches-regex>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="With Predicate is lower case" uid="0006">
    <system-under-test>
      <execution>
        <query name="Select first departments">
          select lower([Name]) from [HumanResources].[Department]
        </query>
      </execution>
    </system-under-test>
    <assert>
      <all-rows>
        <variable column-index="0">Name</variable>
        <predicate name="Name" type="text">
          <lower-case/>
        </predicate>
      </all-rows>
    </assert>
  </test>
  <test name="With Predicate is lower case" uid="0007">
    <system-under-test>
      <execution>
        <query name="Select first departments">
          select upper([Name]) from [HumanResources].[Department]
        </query>
      </execution>
    </system-under-test>
    <assert>
      <all-rows>
        <variable column-index="0">Name</variable>
        <predicate name="Name" type="text">
          <upper-case/>
        </predicate>
      </all-rows>
    </assert>
  </test>
</testSuite>
